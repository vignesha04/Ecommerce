!function(e,t){"use strict";function n(e){function t(e,t){return e?r(e)?e.indexOf(t)>=0:e.hasOwnProperty(t):void 0}return["$animate",function(n){return{restrict:"AE",transclude:"element",priority:1,terminal:!0,require:"^^ngMessages",link:function(i,a,o,s,l){var c,d,h,u;if(!e){c=a[0],h=o.ngMessage||o.when,u=o.ngMessageExp||o.whenExp;var f=function(e){d=e?r(e)?e:e.split(/[\s,]+/):null,s.reRender()};u?(f(i.$eval(u)),i.$watchCollection(u,f)):f(h)}var p,g;s.register(c,g={test:function(e){return t(d,e)},attach:function(){p||l(function(t,i){n.enter(t,null,a),p=t;var r=p.$$attachId=s.getAttachId();p.on("$destroy",function(){p&&p.$$attachId===r&&(s.deregister(c,e),g.detach()),i.$destroy()})})},detach:function(){if(p){var e=p;p=null,n.leave(e)}}},e),i.$on("$destroy",function(){s.deregister(c,e)})}}}]}var i,r,a,o;t.module("ngMessages",[],function(){i=t.forEach,r=t.isArray,a=t.isString,o=t.element}).info({angularVersion:"1.7.8"}).directive("ngMessages",["$animate",function(e){function t(e,t){return a(t)&&0===t.length||n(e.$eval(t))}function n(e){return a(e)?e.length:!!e}var r="ng-active",o="ng-inactive";return{require:"ngMessages",restrict:"AE",controller:["$element","$scope","$attrs",function(a,s,l){function c(e,t){for(var n=t,i=[];n&&n!==e;){var r=n.$$ngMessageNode;if(r&&r.length)return m[r];n.childNodes.length&&-1===i.indexOf(n)?(i.push(n),n=n.childNodes[n.childNodes.length-1]):n.previousSibling?n=n.previousSibling:(n=n.parentNode,i.push(n))}}function d(e,t,n){var i=m[n];if(u.head){var r=c(e,t);r?(i.next=r.next,r.next=i):(i.next=u.head,u.head=i)}else u.head=i}function h(e,t,n){var i=m[n];if(i){var r=c(e,t);r?r.next=i.next:u.head=i.next}}var u=this,f=0,p=0;this.getAttachId=function(){return p++};var g,v,m=this.messages={};this.render=function(c){c=c||{},g=!1,v=c;for(var d=t(s,l.ngMessagesMultiple)||t(s,l.multiple),h=[],f={},p=0,m=u.head,x=!1,b=0;null!=m;){b++;var y=m.message,C=!1;x||i(c,function(e,t){if(n(e)&&!C&&(p++,y.test(t))){if(f[t])return;f[t]=!0,C=!0,y.attach()}}),C?x=!d:h.push(y),m=m.next}i(h,function(e){e.detach()});var A=h.length!==b,w=u["default"]&&!A&&p>0;w?u["default"].attach():u["default"]&&u["default"].detach(),A||w?e.setClass(a,r,o):e.setClass(a,o,r)},s.$watchCollection(l.ngMessages||l["for"],u.render),this.reRender=function(){g||(g=!0,s.$evalAsync(function(){g&&v&&u.render(v)}))},this.register=function(e,t,n){if(n)u["default"]=t;else{var i=f.toString();m[i]={message:t},d(a[0],e,i),e.$$ngMessageNode=i,f++}u.reRender()},this.deregister=function(e,t){if(t)delete u["default"];else{var n=e.$$ngMessageNode;delete e.$$ngMessageNode,h(a[0],e,n),delete m[n]}u.reRender()}}]}}]).directive("ngMessagesInclude",["$templateRequest","$document","$compile",function(e,t,n){function i(e,i){var r=n.$$createComment?n.$$createComment("ngMessagesInclude",i):t[0].createComment(" ngMessagesInclude: "+i+" "),a=o(r);e.after(a),e.remove()}return{restrict:"AE",require:"^^ngMessages",link:function(t,r,o){var s=o.ngMessagesInclude||o.src;e(s).then(function(e){t.$$destroyed||(a(e)&&!e.trim()?i(r,s):n(e)(t,function(e){r.after(e),i(r,s)}))})}}}]).directive("ngMessage",n()).directive("ngMessageExp",n()).directive("ngMessageDefault",n(!0)),describe("ngMessages",function(){function e(e){return(e.length?e[0]:e).querySelectorAll("[ng-message], [ng-message-exp]")}function n(e){return e.replace(/\s+/g,"")}function i(e){return a(e)?e.trim():e}beforeEach(inject.strictDi()),beforeEach(module("ngMessages"));var r;afterEach(function(){dealoc(r)}),it("should render based off of a hashmap collection",inject(function(e,t){r=t('<div ng-messages="col">  <div ng-message="val">Message is set</div></div>')(e),e.$digest(),expect(r.text()).not.toContain("Message is set"),e.$apply(function(){e.col={val:!0}}),expect(r.text()).toContain("Message is set")})),it("should render the same message if multiple message keys match",inject(function(e,t){r=t('<div ng-messages="col">  <div ng-message="one, two, three">Message is set</div></div>')(e),e.$digest(),expect(r.text()).not.toContain("Message is set"),e.$apply(function(){e.col={one:!0}}),expect(r.text()).toContain("Message is set"),e.$apply(function(){e.col={two:!0,one:!1}}),expect(r.text()).toContain("Message is set"),e.$apply(function(){e.col={three:!0,two:!1}}),expect(r.text()).toContain("Message is set"),e.$apply(function(){e.col={three:!1}}),expect(r.text()).not.toContain("Message is set")})),it("should use the when attribute when an element directive is used",inject(function(e,t){r=t('<ng-messages for="col">  <ng-message when="val">Message is set</div></ng-messages>')(e),e.$digest(),expect(r.text()).not.toContain("Message is set"),e.$apply(function(){e.col={val:!0}}),expect(r.text()).toContain("Message is set")})),it("should render the same message if multiple message keys match based on the when attribute",inject(function(e,t){r=t('<ng-messages for="col">  <ng-message when=" one two three ">Message is set</div></ng-messages>')(e),e.$digest(),expect(r.text()).not.toContain("Message is set"),e.$apply(function(){e.col={one:!0}}),expect(r.text()).toContain("Message is set"),e.$apply(function(){e.col={two:!0,one:!1}}),expect(r.text()).toContain("Message is set"),e.$apply(function(){e.col={three:!0,two:!1}}),expect(r.text()).toContain("Message is set"),e.$apply(function(){e.col={three:!1}}),expect(r.text()).not.toContain("Message is set")})),it("should allow a dynamic expression to be set when ng-message-exp is used",inject(function(e,t){r=t('<div ng-messages="col">  <div ng-message-exp="variable">Message is crazy</div></div>')(e),e.$digest(),expect(r.text()).not.toContain("Message is crazy"),e.$apply(function(){e.variable="error",e.col={error:!0}}),expect(r.text()).toContain("Message is crazy"),e.$apply(function(){e.col={error:!1,failure:!0}}),expect(r.text()).not.toContain("Message is crazy"),e.$apply(function(){e.variable=["failure"]}),expect(r.text()).toContain("Message is crazy"),e.$apply(function(){e.variable=null}),expect(r.text()).not.toContain("Message is crazy")})),it("should allow a dynamic expression to be set when the when-exp attribute is used",inject(function(e,t){r=t('<ng-messages for="col">  <ng-message when-exp="variable">Message is crazy</ng-message></ng-messages>')(e),e.$digest(),expect(r.text()).not.toContain("Message is crazy"),e.$apply(function(){e.variable="error, failure",e.col={error:!0}}),expect(r.text()).toContain("Message is crazy"),e.$apply(function(){e.col={error:!1,failure:!0}}),expect(r.text()).toContain("Message is crazy"),e.$apply(function(){e.variable=[]}),expect(r.text()).not.toContain("Message is crazy"),e.$apply(function(){e.variable=null}),expect(r.text()).not.toContain("Message is crazy")})),they("should render empty when $prop is used as a collection value",{"null":null,"false":!1,0:0,"[]":[],"[{}]":[{}],"":"","{ val2 : true }":{val2:!0}},function(e){inject(function(t,n){r=n('<div ng-messages="col">  <div ng-message="val">Message is set</div></div>')(t),t.$digest(),t.$apply(function(){t.col=e}),expect(r.text()).not.toContain("Message is set")})}),they("should insert and remove matching inner elements when $prop is used as a value",{"true":!0,1:1,"{}":{},"[]":[],"[null]":[null]},function(t){inject(function(n,a){r=a('<div ng-messages="col">  <div ng-message="blue">This message is blue</div>  <div ng-message="red">This message is red</div></div>')(n),n.$apply(function(){n.col={}}),expect(e(r).length).toBe(0),expect(i(r.text())).toEqual(""),n.$apply(function(){n.col={blue:!0,red:!1}}),expect(e(r).length).toBe(1),expect(i(r.text())).toEqual("This message is blue"),n.$apply(function(){n.col={red:t}}),expect(e(r).length).toBe(1),expect(i(r.text())).toEqual("This message is red"),n.$apply(function(){n.col=null}),expect(e(r).length).toBe(0),expect(i(r.text())).toEqual(""),n.$apply(function(){n.col={blue:0,red:null}}),expect(e(r).length).toBe(0),expect(i(r.text())).toEqual("")})}),it("should display the elements in the order defined in the DOM",inject(function(e,i){r=i('<div ng-messages="col">  <div ng-message="one">Message#one</div>  <div ng-message="two">Message#two</div>  <div ng-message="three">Message#three</div></div>')(e),e.$apply(function(){e.col={three:!0,one:!0,two:!0}}),t.forEach(["one","two","three"],function(t){expect(n(r.text())).toEqual("Message#"+t),e.$apply(function(){e.col[t]=!1})}),expect(n(r.text())).toEqual("")})),it("should add ng-active/ng-inactive CSS classes to the element when errors are/aren't displayed",inject(function(e,t){r=t('<div ng-messages="col">  <div ng-message="ready">This message is ready</div></div>')(e),e.$apply(function(){e.col={}}),expect(r.hasClass("ng-active")).toBe(!1),expect(r.hasClass("ng-inactive")).toBe(!0),e.$apply(function(){e.col={ready:!0}}),expect(r.hasClass("ng-active")).toBe(!0),expect(r.hasClass("ng-inactive")).toBe(!1)})),it("should automatically re-render the messages when other directives dynamically change them",inject(function(t,n){r=n('<div ng-messages="col">  <div ng-message="primary">Enter something</div>  <div ng-repeat="item in items">    <div ng-message-exp="item.name">{{ item.text }}</div>  </div></div>')(t),t.$apply(function(){t.col={},t.items=[{text:"Your age is incorrect",name:"age"},{text:"You're too tall man!",name:"height"},{text:"Your hair is too long",name:"hair"}]}),expect(e(r).length).toBe(0),expect(i(r.text())).toEqual(""),t.$apply(function(){t.col={hair:!0}}),expect(e(r).length).toBe(1),expect(i(r.text())).toEqual("Your hair is too long"),t.$apply(function(){t.col={age:!0,hair:!0}}),expect(e(r).length).toBe(1),expect(i(r.text())).toEqual("Your age is incorrect"),t.$apply(function(){t.items.shift()}),expect(e(r).length).toBe(1),expect(i(r.text())).toEqual("Your hair is too long"),t.$apply(function(){t.items.length=0,t.col.primary=!0}),expect(e(r).length).toBe(1),expect(i(r.text())).toEqual("Enter something")})),it("should be compatible with ngBind",inject(function(t,n){r=n('<div ng-messages="col">        <div ng-message="required" ng-bind="errorMessages.required"></div>        <div ng-message="extra" ng-bind="errorMessages.extra"></div></div>')(t),t.$apply(function(){t.col={required:!0,extra:!0},t.errorMessages={required:"Fill in the text field.",extra:"Extra error message."}}),expect(e(r).length).toBe(1),expect(i(r.text())).toEqual("Fill in the text field."),t.$apply(function(){t.col.required=!1,t.col.extra=!0}),expect(e(r).length).toBe(1),expect(i(r.text())).toEqual("Extra error message."),t.$apply(function(){t.errorMessages.extra="New error message."}),expect(e(r).length).toBe(1),expect(i(r.text())).toEqual("New error message.")})),it("should only detach the message object that is associated with the message node being removed",inject(function(t,n,i){spyOn(i,"leave"),r=n('<div ng-messages="col">  <div ng-message="primary">Enter something</div></div>')(t),t.col={primary:!0},t.$digest(),expect(e(r).length).toEqual(1);var a=e(r)[0];t.col={primary:void 0},t.$digest(),expect(i.leave).toHaveBeenCalledOnce();var s=i.leave.calls.mostRecent().args[0][0];expect(s).toBe(a),i.leave.calls.reset(),t.col={primary:!0},t.$digest(),o(s).remove(),expect(i.leave).not.toHaveBeenCalled(),expect(e(r).length).toEqual(1);var l=e(r)[0];expect(l).not.toBe(a)})),it("should render animations when the active/inactive classes are added/removed",function(){module("ngAnimate"),module("ngAnimateMock"),inject(function(e,t,n){r=t('<div ng-messages="col">  <div ng-message="ready">This message is ready</div></div>')(e),e.$apply(function(){e.col={}});var i=n.queue.pop();expect(i.event).toBe("setClass"),expect(i.args[1]).toBe("ng-inactive"),expect(i.args[2]).toBe("ng-active"),e.$apply(function(){e.col={ready:!0}}),i=n.queue.pop(),expect(i.event).toBe("setClass"),expect(i.args[1]).toBe("ng-active"),expect(i.args[2]).toBe("ng-inactive")})}),describe("ngMessage nested nested inside elements",function(){it("should not crash or leak memory when the messages are transcluded, the first message is visible, and ngMessages is removed by ngIf",function(){module(function(e){e.directive("messageWrap",function(){return{transclude:!0,scope:{col:"=col"},template:'<div ng-messages="col"><ng-transclude></ng-transclude></div>'}})}),inject(function(t,n){r=n('<div><div ng-if="show"><div message-wrap col="col">        <div ng-message="a">A</div>        <div ng-message="b">B</div></div></div></div>')(t),t.$apply(function(){t.show=!0,t.col={a:!0,b:!0}}),expect(e(r).length).toBe(1),expect(i(r.text())).toEqual("A"),t.$apply("show = false"),expect(e(r).length).toBe(0)})}),it("should not crash when the first of two nested messages is removed",function(){inject(function(t,n){r=n('<div ng-messages="col"><div class="wrapper"><div remove-me ng-message="a">A</div><div ng-message="b">B</div></div></div>')(t),t.$apply(function(){t.col={a:!0,b:!1}}),expect(e(r).length).toBe(1),expect(i(r.text())).toEqual("A");var a=r.controller("ngMessages"),s=spyOn(a,"deregister").and.callThrough(),l=r[0].querySelector('[ng-message="a"]');o(l).remove(),t.$digest(),expect(i(s.calls.mostRecent().args[0].nodeValue)).toBe("ngMessage: a"),expect(e(r).length).toBe(0)})}),it("should not crash, but show deeply nested messages correctly after a message has been removed",function(){inject(function(t,n){r=n('<div ng-messages="col" ng-messages-multiple><div class="another-wrapper"><div ng-message="a">A</div><div class="wrapper"><div ng-message="b">B</div><div ng-message="c">C</div></div><div ng-message="d">D</div></div></div>')(t),t.$apply(function(){t.col={a:!0,b:!0}}),expect(e(r).length).toBe(2),expect(i(r.text())).toEqual("AB");var a=r.controller("ngMessages"),s=spyOn(a,"deregister").and.callThrough(),l=r[0].querySelector('[ng-message="b"]');o(l).remove(),t.$digest(),expect(i(s.calls.mostRecent().args[0].nodeValue)).toBe("ngMessage: b"),expect(e(r).length).toBe(1),expect(i(r.text())).toEqual("A")})})}),it("should clean-up the ngMessage scope when a message is removed",inject(function(e,t){var n='<div ng-messages="items"><div ng-message="a">{{forA}}</div></div>';r=e(n)(t),t.$apply(function(){t.forA="A",t.items={a:!0}}),expect(r.text()).toBe("A");var i=t.$countWatchers();t.$apply("items.a = false"),expect(r.text()).toBe(""),expect(t.$countWatchers()).toBe(i-1)})),it("should unregister the ngMessage even if it was never attached",inject(function(t,n){var i='<div ng-messages="items"><div ng-if="show"><div ng-message="x">ERROR</div></div></div>';r=t(i)(n);var a=r.controller("ngMessages");expect(e(r).length).toBe(0),expect(Object.keys(a.messages).length).toEqual(0),n.$apply("show = true"),expect(e(r).length).toBe(0),expect(Object.keys(a.messages).length).toEqual(1),n.$apply("show = false"),expect(e(r).length).toBe(0),expect(Object.keys(a.messages).length).toEqual(0)})),describe("default message",function(){it("should render a default message when no message matches",inject(function(e,t){r=t('<div ng-messages="col">  <div ng-message="val">Message is set</div>  <div ng-message-default>Default message is set</div></div>')(e),e.$apply(function(){e.col={unexpected:!1}}),e.$digest(),expect(r.text().trim()).toBe(""),expect(r).not.toHaveClass("ng-active"),e.$apply(function(){e.col={unexpected:!0}}),expect(r.text().trim()).toBe("Default message is set"),expect(r).toHaveClass("ng-active"),e.$apply(function(){e.col={unexpected:!1}}),expect(r.text().trim()).toBe(""),expect(r).not.toHaveClass("ng-active"),e.$apply(function(){e.col={val:!0,unexpected:!0}}),expect(r.text().trim()).toBe("Message is set"),expect(r).toHaveClass("ng-active")})),it("should not render a default message with ng-messages-multiple if another error matches",inject(function(e,t){r=t('<div ng-messages="col" ng-messages-multiple>  <div ng-message="val">Message is set</div>  <div ng-message="other">Other message is set</div>  <div ng-message-default>Default message is set</div></div>')(e),expect(r.text().trim()).toBe(""),e.$apply(function(){e.col={val:!0,other:!1,unexpected:!1}}),expect(r.text().trim()).toBe("Message is set"),e.$apply(function(){e.col={val:!0,other:!0,unexpected:!0}}),expect(r.text().trim()).toBe("Message is set  Other message is set"),e.$apply(function(){e.col={val:!1,other:!1,unexpected:!0}}),expect(r.text().trim()).toBe("Default message is set")})),it("should handle a default message with ngIf",inject(function(e,t){r=t('<div ng-messages="col">  <div ng-message="val">Message is set</div>  <div ng-if="default" ng-message-default>Default message is set</div></div>')(e),e["default"]=!0,e.col={unexpected:!0},e.$digest(),expect(r.text().trim()).toBe("Default message is set"),e.$apply("default = false"),expect(r.text().trim()).toBe(""),e.$apply("default = true"),expect(r.text().trim()).toBe("Default message is set"),e.$apply(function(){e.col={val:!0}}),expect(r.text().trim()).toBe("Message is set")}))}),describe("when including templates",function(){they("should work with a dynamic collection model which is managed by ngRepeat",{'<div ng-messages-include="...">':'<div ng-messages="item"><div ng-messages-include="abc.html"></div></div>','<ng-messages-include src="...">':'<ng-messages for="item"><ng-messages-include src="abc.html"></ng-messages-include></ng-messages>'},function(t){inject(function(n,i,a){a.put("abc.html",'<div ng-message="a">A</div><div ng-message="b">B</div><div ng-message="c">C</div>'),t='<div><div ng-repeat="item in items">'+t+"</div></div>",i.items=[{},{},{}],r=n(t)(i),i.$apply(function(){i.items[0].a=!0,i.items[1].b=!0,i.items[2].c=!0});var o=r[0].querySelectorAll("[ng-repeat]");expect(e(r).length).toBe(3),expect(e(o[0]).length).toBe(1),expect(e(o[1]).length).toBe(1),expect(e(o[2]).length).toBe(1),expect(r.text().trim()).toBe("ABC"),i.$apply(function(){i.items[0].a=!1,i.items[0].c=!0,i.items[1].b=!1,i.items[2].c=!1,i.items[2].a=!0}),expect(r.text().trim()).toBe("CA"),i.$apply(function(){i.items[1].b=!0,i.items.reverse()}),expect(r.text().trim()).toBe("ABC")})}),they("should remove the $prop element and place a comment anchor node where it used to be",{'<div ng-messages-include="...">':'<div ng-messages="data"><div ng-messages-include="abc.html"></div></div>','<ng-messages-include src="...">':'<ng-messages for="data"><ng-messages-include src="abc.html"></ng-messages-include></ng-messages>'},function(e){inject(function(t,n,i){i.put("abc.html","<div></div>"),r=t(e)(n),n.$digest();var a=r[0].querySelector("[ng-messages-include], ng-messages-include");expect(a).toBeFalsy();var o=r[0].childNodes[0];expect(o.nodeType).toBe(8),expect(o.nodeValue).toBe(" ngMessagesInclude: abc.html ")})}),they("should load a remote template using $prop",{'<div ng-messages-include="...">':'<div ng-messages="data"><div ng-messages-include="abc.html"></div></div>','<ng-messages-include src="...">':'<ng-messages for="data"><ng-messages-include src="abc.html"></ng-messages-include></ng-messages>'},function(t){inject(function(n,a,o){o.put("abc.html",'<div ng-message="a">A</div><div ng-message="b">B</div><div ng-message="c">C</div>'),r=n(t)(a),a.$apply(function(){a.data={a:1,b:2,c:3}}),expect(e(r).length).toBe(1),expect(i(r.text())).toEqual("A"),a.$apply(function(){a.data={c:3}}),expect(e(r).length).toBe(1),expect(i(r.text())).toEqual("C")})}),it("should cache the template after download",inject(function(e,t,n,i){i.expect("GET","tpl").respond(201,"<div>abc</div>"),expect(n.get("tpl")).toBeUndefined(),r=t('<div ng-messages="data"><div ng-messages-include="tpl"></div></div>')(e),e.$digest(),i.flush(),expect(n.get("tpl")).toBeDefined()})),it("should re-render the messages after download without an extra digest",inject(function(t,n,a){a.expect("GET","my-messages").respond(201,'<div ng-message="required">You did not enter a value</div>'),r=n('<div ng-messages="data">  <div ng-messages-include="my-messages"></div>  <div ng-message="failed">Your value is that of failure</div></div>')(t),t.data={required:!0,failed:!0},t.$digest(),expect(e(r).length).toBe(1),expect(i(r.text())).toEqual("Your value is that of failure"),a.flush(),t.$digest(),expect(e(r).length).toBe(1),expect(i(r.text())).toEqual("You did not enter a value")})),it("should allow for overriding the remote template messages within the element depending on where the remote template is placed",inject(function(t,n,a){a.put("abc.html",'<div ng-message="a">A</div><div ng-message="b">B</div><div ng-message="c">C</div>'),r=t('<div ng-messages="data">  <div ng-message="a">AAA</div>  <div ng-messages-include="abc.html"></div>  <div ng-message="c">CCC</div></div>')(n),n.$apply(function(){n.data={a:1,b:2,c:3}}),expect(e(r).length).toBe(1),expect(i(r.text())).toEqual("AAA"),n.$apply(function(){n.data={b:2,c:3}}),expect(e(r).length).toBe(1),expect(i(r.text())).toEqual("B"),n.$apply(function(){n.data={c:3}}),expect(e(r).length).toBe(1),expect(i(r.text())).toEqual("C")})),it("should properly detect a previous message, even if it was registered later",inject(function(e,t,n){n.put("include.html",'<div ng-message="a">A</div>');var a='<div ng-messages="items"><div ng-include="\'include.html\'"></div><div ng-message="b">B</div><div ng-message="c">C</div></div>';r=e(a)(t),t.$apply("items = {b: true, c: true}"),expect(r.text()).toBe("B");var s=r.controller("ngMessages"),l=spyOn(s,"deregister").and.callThrough(),c=r[0].querySelector('[ng-message="b"]');o(c).remove(),expect(i(l.calls.mostRecent().args[0].nodeValue)).toBe("ngMessage: b"),t.$apply("items.a = true"),expect(r.text()).toBe("A")})),it("should not throw if scope has been destroyed when template request is ready",inject(function(e,t,n){t.expectGET("messages.html").respond('<div ng-message="a">A</div>'),e.show=!0;var i='<div ng-if="show"><div ng-messages="items"><div ng-messages-include="messages.html"></div></div></div>';r=n(i)(e),e.$digest(),e.show=!1,e.$digest(),expect(function(){t.flush()}).not.toThrow()})),it("should not throw if the template is empty",inject(function(e,t,n){var i='<div ng-messages="items"><div ng-messages-include="messages1.html"></div><div ng-messages-include="messages2.html"></div></div>';n.put("messages1.html",""),n.put("messages2.html","   "),r=e(i)(t),t.$digest(),expect(r.text()).toBe(""),expect(r.children().length).toBe(0),expect(r.contents().length).toBe(2)}))}),describe("when multiple",function(){they("should show all truthy messages when the $prop attr is present",{multiple:"multiple","ng-messages-multiple":"ng-messages-multiple"},function(t){inject(function(i,a){r=a('<div ng-messages="data" '+t+'>  <div ng-message="one">1</div>  <div ng-message="two">2</div>  <div ng-message="three">3</div></div>')(i),i.$apply(function(){i.data={one:!0,two:!1,three:!0}}),expect(e(r).length).toBe(2),expect(n(r.text())).toContain("13")})}),it("should render all truthy messages from a remote template",inject(function(t,i,a){a.put("xyz.html",'<div ng-message="x">X</div><div ng-message="y">Y</div><div ng-message="z">Z</div>'),r=i('<div ng-messages="data" ng-messages-multiple="true"><div ng-messages-include="xyz.html"></div></div>')(t),t.$apply(function(){t.data={x:"a",y:null,z:!0}}),expect(e(r).length).toBe(2),expect(n(r.text())).toEqual("XZ"),t.$apply(function(){t.data.y={}}),expect(e(r).length).toBe(3),expect(n(r.text())).toEqual("XYZ")})),it("should render and override all truthy messages from a remote template",inject(function(t,i,a){a.put("xyz.html",'<div ng-message="x">X</div><div ng-message="y">Y</div><div ng-message="z">Z</div>'),r=i('<div ng-messages="data" ng-messages-multiple="true"><div ng-message="y">YYY</div><div ng-message="z">ZZZ</div><div ng-messages-include="xyz.html"></div></div>')(t),t.$apply(function(){t.data={x:"a",y:null,z:!0}}),expect(e(r).length).toBe(2),expect(n(r.text())).toEqual("ZZZX"),t.$apply(function(){t.data.y={}}),expect(e(r).length).toBe(3),expect(n(r.text())).toEqual("YYYZZZX")}))})})}(window,window.angular);