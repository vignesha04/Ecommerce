!function(e,t){"use strict";function n(e){return null!=e&&""!==e&&"hasOwnProperty"!==e&&i.test("."+e)}function r(e,r){if(!n(r))throw o("badmember",'Dotted member path "@{0}" is invalid.',r);for(var a=r.split("."),i=0,s=a.length;s>i&&t.isDefined(e);i++){var l=a[i];e=null!==e?e[l]:void 0}return e}function a(e,n){n=n||{},t.forEach(n,function(e,t){delete n[t]});for(var r in e)!e.hasOwnProperty(r)||"$"===r.charAt(0)&&"$"===r.charAt(1)||(n[r]=e[r]);return n}var o=t.$$minErr("$resource"),i=/^(\.[a-zA-Z_$@][0-9a-zA-Z_$@]*)+$/;t.module("ngResource",["ng"]).info({angularVersion:"1.7.8"}).provider("$resource",function(){var e=/^https?:\/\/\[[^\]]*][^/]*/,n=this;this.defaults={stripTrailingSlashes:!0,cancellable:!1,actions:{get:{method:"GET"},save:{method:"POST"},query:{method:"GET",isArray:!0},remove:{method:"DELETE"},"delete":{method:"DELETE"}}},this.$get=["$http","$log","$q","$timeout",function(i,s,l,c){function d(e,t){this.template=e,this.defaults=f({},n.defaults,t),this.urlParams={}}function u(e,t,u,y){function C(e,n){var a={};return n=f({},t,n),p(n,function(t,n){x(t)&&(t=t(e)),a[n]=t&&t.charAt&&"@"===t.charAt(0)?r(e,t.substr(1)):t}),a}function w(e){return e.resource}function A(e){a(e||{},this)}var k=new d(e,y);return u=f({},n.defaults.actions,u),A.prototype.toJSON=function(){var e=f({},this);return delete e.$promise,delete e.$resolved,delete e.$cancelRequest,e},p(u,function(e,t){var n=e.hasBody===!0||e.hasBody!==!1&&/^(POST|PUT|PATCH)$/i.test(e.method),r=e.timeout,d=v(e.cancellable)?e.cancellable:k.defaults.cancellable;r&&!b(r)&&(s.debug("ngResource:\n  Only numeric values are allowed as `timeout`.\n  Promises are not supported in $resource, because the same value would be used for multiple requests. If you are looking for a way to cancel requests, you should use the `cancellable` option."),delete e.timeout,r=null),A[t]=function(s,u,v,b){function y(e){U["catch"](h),null!==T&&T.resolve(e)}var E,_,B,$={};switch(arguments.length){case 4:B=b,_=v;case 3:case 2:if(!x(u)){$=s,E=u,_=v;break}if(x(s)){_=s,B=u;break}_=u,B=v;case 1:x(s)?_=s:n?E=s:$=s;break;case 0:break;default:throw o("badargs","Expected up to 4 arguments [params, data, success, error], got {0} arguments",arguments.length)}var T,q,S,O=this instanceof A,j=O?E:e.isArray?[]:new A(E),R={},P=e.interceptor&&e.interceptor.request||void 0,I=e.interceptor&&e.interceptor.requestError||void 0,z=e.interceptor&&e.interceptor.response||w,H=e.interceptor&&e.interceptor.responseError||l.reject,M=_?function(e){_(e,S.headers,S.status,S.statusText)}:void 0,D=B||void 0;p(e,function(e,t){switch(t){default:R[t]=g(e);break;case"params":case"isArray":case"interceptor":case"cancellable":}}),!O&&d&&(T=l.defer(),R.timeout=T.promise,r&&(q=c(T.resolve,r))),n&&(R.data=E),k.setUrlParams(R,f({},C(E,e.params||{}),$),e.url);var U=l.resolve(R).then(P)["catch"](I).then(i);return U=U.then(function(n){var r=n.data;if(r){if(m(r)!==!!e.isArray)throw o("badcfg","Error in resource configuration for action `{0}`. Expected response to contain an {1} but got an {2} (Request: {3} {4})",t,e.isArray?"array":"object",m(r)?"array":"object",R.method,R.url);if(e.isArray)j.length=0,p(r,function(e){"object"==typeof e?j.push(new A(e)):j.push(e)});else{var i=j.$promise;a(r,j),j.$promise=i}}return n.resource=j,S=n,z(n)},function(e){return e.resource=j,S=e,H(e)}),U=U["finally"](function(){j.$resolved=!0,!O&&d&&(j.$cancelRequest=h,c.cancel(q),T=q=R.timeout=null)}),U.then(M,D),O?U:(j.$promise=U,j.$resolved=!1,d&&(j.$cancelRequest=y),j)},A.prototype["$"+t]=function(e,n,r){x(e)&&(r=n,n=e,e={});var a=A[t].call(this,e,this,n,r);return a.$promise||a}}),A}var h=t.noop,p=t.forEach,f=t.extend,g=t.copy,m=t.isArray,v=t.isDefined,x=t.isFunction,b=t.isNumber,y=t.$$encodeUriQuery,C=t.$$encodeUriSegment;return d.prototype={setUrlParams:function(t,n,r){var a,i,s=this,l=r||s.template,c="",d=s.urlParams=Object.create(null);p(l.split(/\W/),function(e){if("hasOwnProperty"===e)throw o("badname","hasOwnProperty is not a valid parameter name.");!new RegExp("^\\d+$").test(e)&&e&&new RegExp("(^|[^\\\\]):"+e+"(\\W|$)").test(l)&&(d[e]={isQueryParamValue:new RegExp("\\?.*=:"+e+"(?:\\W|$)").test(l)})}),l=l.replace(/\\:/g,":"),l=l.replace(e,function(e){return c=e,""}),n=n||{},p(s.urlParams,function(e,t){a=n.hasOwnProperty(t)?n[t]:s.defaults[t],v(a)&&null!==a?(i=e.isQueryParamValue?y(a,!0):C(a),l=l.replace(new RegExp(":"+t+"(\\W|$)","g"),function(e,t){return i+t})):l=l.replace(new RegExp("(/?):"+t+"(\\W|$)","g"),function(e,t,n){return"/"===n.charAt(0)?n:t+n})}),s.defaults.stripTrailingSlashes&&(l=l.replace(/\/+$/,"")||"/"),l=l.replace(/\/\.(?=\w+($|\?))/,"."),t.url=c+l.replace(/\/(\\|%5C)\./,"/."),p(n,function(e,n){s.urlParams[n]||(t.params=t.params||{},t.params[n]=e)})}},u}]}),describe("resource",function(){var e=t.noop,o=t.extend;describe("basic usage",function(){var i,s,l,c,d,u;beforeEach(module("ngResource")),beforeEach(module(function(e){d=e})),beforeEach(inject(function(e){c=e.get("$httpBackend"),i=e.get("$resource"),u=e.get("$q"),s=i("/CreditCard/:id:verb",{id:"@id.key"},{charge:{method:"post",params:{verb:"!charge"}},patch:{method:"PATCH"},conditionalPut:{method:"PUT",headers:{"If-None-Match":"*"}}}),l=jasmine.createSpy("callback")})),afterEach(function(){c.verifyNoOutstandingExpectation()}),describe("isValidDottedPath",function(){it("should support arbitrary dotted names",function(){expect(n("")).toBe(!1),expect(n("1")).toBe(!1),expect(n("1abc")).toBe(!1),expect(n(".")).toBe(!1),expect(n("$")).toBe(!0),expect(n("@")).toBe(!0),expect(n("a")).toBe(!0),expect(n("A")).toBe(!0),expect(n("a1")).toBe(!0),expect(n("$a")).toBe(!0),expect(n("$1")).toBe(!0),expect(n("$$")).toBe(!0),expect(n("$.$")).toBe(!0),expect(n(".$")).toBe(!1),expect(n("$.")).toBe(!1),expect(n("@.")).toBe(!1),expect(n(".@")).toBe(!1)})}),describe("lookupDottedPath",function(){var e={a:{b:"foo",c:null,"@d":"d-foo"},"@b":"b-foo"};it("should throw for invalid path",function(){expect(function(){r(e,".ckck")}).toThrowMinErr("$resource","badmember",'Dotted member path "@.ckck" is invalid.')}),it("should get dotted paths",function(){expect(r(e,"a")).toEqual({b:"foo",c:null,"@d":"d-foo"}),expect(r(e,"a.b")).toBe("foo"),expect(r(e,"a.c")).toBeNull(),expect(r(e,"a.@d")).toBe("d-foo"),expect(r(e,"@b")).toBe("b-foo")}),it("should skip over null/undefined members",function(){expect(r(e,"a.b.c")).toBeUndefined(),expect(r(e,"a.c.c")).toBeUndefined(),expect(r(e,"a.b.c.d")).toBeUndefined(),expect(r(e,"NOT_EXIST")).toBeUndefined()})}),it("should not include a request body when calling $delete",function(){c.expect("DELETE","/fooresource",null).respond({});var e=i("/fooresource"),t=new e({foo:"bar"});t.$delete(),c.flush()}),it("should include a request body when calling custom method with hasBody is true",function(){var e={name:"info.txt"},t={at:"2038-01-19 03:14:08"};c.expect("CREATE","/fooresource",e).respond({fid:42}),c.expect("DELETE","/fooresource",t).respond({});var n=i("/fooresource",{},{create:{method:"CREATE",hasBody:!0},"delete":{method:"DELETE",hasBody:!0}}),r=n.create(e),a=n["delete"](t);c.flush(),expect(r.fid).toBe(42),expect(a.$resolved).toBe(!0)}),it("should not include a request body if hasBody is false on POST, PUT and PATCH",function(){function e(e,t,n){return expect(n).toBeUndefined(),[200,{id:42}]}c.expect("POST","/foo").respond(e),c.expect("PUT","/foo").respond(e),c.expect("PATCH","/foo").respond(e);var t=i("/foo",{},{post:{method:"POST",hasBody:!1},put:{method:"PUT",hasBody:!1},patch:{method:"PATCH",hasBody:!1}}),n=t.post(),r=t.put(),a=t.patch();c.flush(),expect(n.id).toBe(42),expect(r.id).toBe(42),expect(a.id).toBe(42)}),it("should expect a body if hasBody is true",function(){var e="yathos",t={name:e,password:"Smile"},n={id:1,name:e};c.expect("LOGIN","/user/me",t).respond(n),c.expect("LOGOUT","/user/me",null).respond(null);var r=i("/user/me",{},{login:{method:"LOGIN",hasBody:!0},logout:{method:"LOGOUT",hasBody:!1}}),a=r.login(t),o=r.logout();c.flush(),expect(a.id).toBe(n.id),expect(o.$resolved).toBe(!0)}),it("should build resource",function(){expect(typeof s).toBe("function"),expect(typeof s.get).toBe("function"),expect(typeof s.save).toBe("function"),expect(typeof s.remove).toBe("function"),expect(typeof s["delete"]).toBe("function"),expect(typeof s.query).toBe("function")}),describe("shallow copy",function(){it("should make a copy",function(){var e={key:{}},t=a(e);expect(t).toEqual(e),expect(t.key).toBe(e.key)}),it('should omit "$$"-prefixed properties',function(){var e={$$some:!0,$$:!0},t={};expect(a(e,t)).toBe(t),expect(t.$$some).toBeUndefined(),expect(t.$$).toBeUndefined()}),it('should copy "$"-prefixed properties from copy',function(){var e={$some:!0},t={};expect(a(e,t)).toBe(t),expect(t.$some).toBe(e.$some)}),it("should omit properties from prototype chain",function(){function e(){}var t,n={};e.prototype.hello="world",t=new e,t.goodbye="world",expect(a(t,n)).toBe(n),expect(n.hello).toBeUndefined(),expect(n.goodbye).toBe("world")})}),it("should not throw if response.data is the resource object",function(){var e={id:{key:123},number:"9876"};c.expect("GET","/CreditCard/123").respond(e);var n=s.get({id:123});c.flush(),expect(n instanceof s).toBe(!0),c.expect("POST","/CreditCard/123",t.toJson(e)).respond(n),n.$save(),c.flush(),expect(n.id).toEqual({key:123}),expect(n.number).toEqual("9876")}),it("should default to empty parameters",function(){c.expect("GET","URL").respond({}),i("URL").query()}),it("should ignore slashes of undefined parameters",function(){var e=i("/Path/:a/:b/:c");c.when("GET","/Path").respond("{}"),c.when("GET","/Path/0").respond("{}"),c.when("GET","/Path/false").respond("{}"),c.when("GET","/Path").respond("{}"),c.when("GET","/Path/").respond("{}"),c.when("GET","/Path/1").respond("{}"),c.when("GET","/Path/2/3").respond("{}"),c.when("GET","/Path/4/5").respond("{}"),c.when("GET","/Path/6/7/8").respond("{}"),e.get({}),e.get({a:0}),e.get({a:!1}),e.get({a:null}),e.get({a:void 0}),e.get({a:""}),e.get({a:1}),e.get({a:2,b:3}),e.get({a:4,c:5}),e.get({a:6,b:7,c:8})}),it("should not ignore leading slashes of undefined parameters that have non-slash trailing sequence",function(){var e=i("/Path/:a.foo/:b.bar/:c.baz");c.when("GET","/Path/.foo/.bar.baz").respond("{}"),c.when("GET","/Path/0.foo/.bar.baz").respond("{}"),c.when("GET","/Path/false.foo/.bar.baz").respond("{}"),c.when("GET","/Path/.foo/.bar.baz").respond("{}"),c.when("GET","/Path/.foo/.bar.baz").respond("{}"),c.when("GET","/Path/1.foo/.bar.baz").respond("{}"),c.when("GET","/Path/2.foo/3.bar.baz").respond("{}"),c.when("GET","/Path/4.foo/.bar/5.baz").respond("{}"),c.when("GET","/Path/6.foo/7.bar/8.baz").respond("{}"),e.get({}),e.get({a:0}),e.get({a:!1}),e.get({a:null}),e.get({a:void 0}),e.get({a:""}),e.get({a:1}),e.get({a:2,b:3}),e.get({a:4,c:5}),e.get({a:6,b:7,c:8})}),it("should not collapsed the url into an empty string",function(){var e=i("/:foo/:bar/");c.when("GET","/").respond("{}"),e.get({})}),it("should support escaping colons in url template",function(){var e=i("http://localhost\\:8080/Path/:a/\\:stillPath/:b");c.expect("GET","http://localhost:8080/Path/foo/:stillPath/bar").respond(),e.get({a:"foo",b:"bar"})}),it("should support an unescaped url",function(){var e=i("http://localhost:8080/Path/:a");c.expect("GET","http://localhost:8080/Path/foo").respond(),e.get({a:"foo"})}),it("should correctly encode url params",function(){var e=i("/Path/:a");c.expect("GET","/Path/foo%231").respond("{}"),c.expect("GET","/Path/doh!@foo?bar=baz%231").respond("{}"),c.expect("GET","/Path/herp$").respond("{}"),c.expect("GET","/Path/foo;bar").respond("{}"),c.expect("GET","/Path/foo?bar=baz;qux").respond("{}"),e.get({a:"foo#1"}),e.get({a:"doh!@foo",bar:"baz#1"}),e.get({a:"herp$"}),e.get({a:"foo;bar"}),e.get({a:"foo",bar:"baz;qux"})}),it("should not encode @ in url params",function(){var e=i("/Path/:a");c.expect("GET","/Path/doh@fo%20o?!do%26h=g%3Da+h&:bar=$baz@1").respond("{}"),e.get({a:"doh@fo o",":bar":"$baz@1","!do&h":"g=a h"})}),it("should encode array params",function(){var e=i("/Path/:a");c.expect("GET","/Path/doh&foo?bar=baz1&bar=baz2").respond("{}"),e.get({a:"doh&foo",bar:["baz1","baz2"]})}),it('should not encode string "null" to "+" in url params',function(){var e=i("/Path/:a");c.expect("GET","/Path/null").respond("{}"),e.get({a:"null"})}),it("should implicitly strip trailing slashes from URLs by default",function(){var e=i("http://localhost:8080/Path/:a/");c.expect("GET","http://localhost:8080/Path/foo").respond(),e.get({a:"foo"})}),it("should support explicitly stripping trailing slashes from URLs",function(){var e=i("http://localhost:8080/Path/:a/",{},{},{stripTrailingSlashes:!0});c.expect("GET","http://localhost:8080/Path/foo").respond(),e.get({a:"foo"})}),it("should support explicitly keeping trailing slashes in URLs",function(){var e=i("http://localhost:8080/Path/:a/",{},{},{stripTrailingSlashes:!1});c.expect("GET","http://localhost:8080/Path/foo/").respond(),e.get({a:"foo"})}),it("should support provider-level configuration to strip trailing slashes in URLs",function(){d.defaults.stripTrailingSlashes=!1;var e=i("http://localhost:8080/Path/:a/");c.expect("GET","http://localhost:8080/Path/foo/").respond(),e.get({a:"foo"})}),it("should support IPv6 URLs",function(){function e(e,t,n){var r=i(e,null,null,{stripTrailingSlashes:!1});c.expect("GET",n).respond(null),r.get(t)}e("http://[2620:0:861:ed1a::1]",{ed1a:"foo"},"http://[2620:0:861:ed1a::1]"),e("http://[2620:0:861:ed1a::1]/",{ed1a:"foo"},"http://[2620:0:861:ed1a::1]/"),e("http://[2620:0:861:ed1a::1]/:ed1a",{ed1a:"foo"},"http://[2620:0:861:ed1a::1]/foo"),e("http://[2620:0:861:ed1a::1]/:ed1a",{},"http://[2620:0:861:ed1a::1]/"),e("http://[2620:0:861:ed1a::1]/:ed1a/",{ed1a:"foo"},"http://[2620:0:861:ed1a::1]/foo/"),e("http://[2620:0:861:ed1a::1]/:ed1a/",{},"http://[2620:0:861:ed1a::1]/")}),it("should support params in the `hostname` part of the URL",function(){function e(e,t,n){var r=i(e,null,null,{stripTrailingSlashes:!1});c.expect("GET",n).respond(null),r.get(t)}e("http://:hostname",{hostname:"foo.com"},"http://foo.com"),e("http://:hostname/",{hostname:"foo.com"},"http://foo.com/"),e("http://:l2Domain.:l1Domain",{l1Domain:"com",l2Domain:"bar"},"http://bar.com"),e("http://:l2Domain.:l1Domain/",{l1Domain:"com",l2Domain:"bar"},"http://bar.com/"),e("http://127.0.0.:octet",{octet:42},"http://127.0.0.42"),e("http://127.0.0.:octet/",{octet:42},"http://127.0.0.42/")}),it("should support overriding provider default trailing-slash stripping configuration",function(){d.defaults.stripTrailingSlashes=!1;var e=i("http://localhost:8080/Path/:a/",{},{},{stripTrailingSlashes:!0});c.expect("GET","http://localhost:8080/Path/foo").respond(),e.get({a:"foo"})}),it("should allow relative paths in resource url",function(){var e=i(":relativePath");c.expect("GET","data.json").respond("{}"),e.get({relativePath:"data.json"})}),it("should handle + in url params",function(){var e=i("/api/myapp/:myresource?from=:from&to=:to&histlen=:histlen");c.expect("GET","/api/myapp/pear+apple?from=2012-04-01&to=2012-04-29&histlen=3").respond("{}"),e.get({myresource:"pear+apple",from:"2012-04-01",to:"2012-04-29",histlen:3})}),it("should encode & in query params unless in query param value",function(){var e=i("/Path/:a");c.expect("GET","/Path/doh&foo?bar=baz%261").respond("{}"),e.get({a:"doh&foo",bar:"baz&1"});var t=i("/api/myapp/resource?:query");c.expect("GET","/api/myapp/resource?foo&bar").respond("{}"),t.get({query:"foo&bar"});var n=i("/api/myapp/resource?from=:from");c.expect("GET","/api/myapp/resource?from=bar%20%26%20blanks").respond("{}"),n.get({from:"bar & blanks"})}),it("should build resource with default param",function(){c.expect("GET","/Order/123/Line/456.visa?minimum=0.05").respond({id:"abc"});var e=i("/Order/:orderId/Line/:id:verb",{orderId:"123",id:"@id.key",verb:".visa",minimum:.05}),t=e.get({id:456});c.flush(),expect(t).toEqualData({id:"abc"})}),it("should support @_property lookups with underscores",function(){c.expect("GET","/Order/123").respond({_id:{_key:"123"},count:0});var e=i("/Order/:_id",{_id:"@_id._key"}),t=e.get({_id:123});c.flush(),expect(t).toEqualData({_id:{_key:"123"},count:0}),c.expect("POST","/Order/123").respond({_id:{_key:"123"},count:1}),t.$save(),c.flush(),expect(t).toEqualData({_id:{_key:"123"},count:1})}),it("should not pass default params between actions",function(){var e=i("/Path",{},{get:{method:"GET",params:{objId:"1"}},perform:{method:"GET"}});c.expect("GET","/Path?objId=1").respond("{}"),c.expect("GET","/Path").respond("{}"),e.get({}),e.perform({})}),it("should build resource with action default param overriding default param",function(){c.expect("GET","/Customer/123").respond({id:"abc"});var e=i("/:type/:typeId",{type:"Order"},{get:{method:"GET",params:{type:"Customer"}}}),t=e.get({typeId:123});c.flush(),expect(t).toEqualData({id:"abc"})}),it("should build resource with action default param reading the value from instance",function(){c.expect("POST","/Customer/123").respond();var e=i("/Customer/:id",{},{post:{method:"POST",params:{id:"@id"}}}),t=new e({id:123});expect(t.id).toBe(123),t.$post()}),it("should not throw TypeError on null default params",function(){c.expect("GET","/Path").respond("{}");var e=i("/Path",{param:null},{get:{method:"GET"}});expect(function(){e.get({})}).not.toThrow()}),it("should handle multiple params with same name",function(){var e=i("/:id/:id");c.when("GET").respond("{}"),c.expect("GET","/1/1"),e.get({id:1})}),it('should throw an exception if a param is called "hasOwnProperty"',function(){expect(function(){i("/:hasOwnProperty").get()}).toThrowMinErr("$resource","badname","hasOwnProperty is not a valid parameter name")}),it("should create resource",function(){c.expect("POST","/CreditCard",'{"name":"misko"}').respond({id:123,name:"misko"});var e=s.save({name:"misko"},l);expect(e).toEqualData({name:"misko"}),expect(l).not.toHaveBeenCalled(),c.flush(),expect(e).toEqualData({id:123,name:"misko"}),expect(l).toHaveBeenCalledOnce(),expect(l.calls.mostRecent().args[0]).toEqual(e),expect(l.calls.mostRecent().args[1]()).toEqual(Object.create(null))}),it("should read resource",function(){c.expect("GET","/CreditCard/123").respond({id:123,number:"9876"});var e=s.get({id:123},l);expect(e instanceof s).toBeTruthy(),expect(e).toEqualData({}),expect(l).not.toHaveBeenCalled(),c.flush(),expect(e).toEqualData({id:123,number:"9876"}),expect(l.calls.mostRecent().args[0]).toEqual(e),expect(l.calls.mostRecent().args[1]()).toEqual(Object.create(null))}),it("should send correct headers",function(){c.expectPUT("/CreditCard/123",void 0,function(e){return"*"===e["If-None-Match"]}).respond({id:123}),s.conditionalPut({id:{key:123}})}),it("should read partial resource",function(){c.expect("GET","/CreditCard").respond([{id:{key:123}}]);var e=s.query();c.flush(),expect(e.length).toEqual(1);var t=e[0];expect(t instanceof s).toBe(!0),expect(t.number).toBeUndefined(),c.expect("GET","/CreditCard/123").respond({id:{key:123},number:"9876"}),t.$get(l),c.flush(),expect(l.calls.mostRecent().args[0]).toEqual(t),expect(l.calls.mostRecent().args[1]()).toEqual(Object.create(null)),expect(t.number).toEqual("9876")}),it("should update resource",function(){c.expect("POST","/CreditCard/123",'{"id":{"key":123},"name":"misko"}').respond({id:{key:123},name:"rama"});var e=s.save({id:{key:123},name:"misko"},l);expect(e).toEqualData({id:{key:123},name:"misko"}),expect(l).not.toHaveBeenCalled(),c.flush()}),it("should query resource",function(){c.expect("GET","/CreditCard?key=value").respond([{id:1},{id:2}]);var e=s.query({key:"value"},l);expect(e).toEqualData([]),expect(l).not.toHaveBeenCalled(),c.flush(),expect(e).toEqualData([{id:1},{id:2}]),expect(l.calls.mostRecent().args[0]).toEqual(e),expect(l.calls.mostRecent().args[1]()).toEqual(Object.create(null))}),it("should have all arguments optional",function(){c.expect("GET","/CreditCard").respond([{id:1}]);var e="",t=s.query(function(){e+="cb;"});c.flush(),expect(t).toEqualData([{id:1}]),expect(e).toEqual("cb;")}),it("should delete resource and call callback",function(){c.expect("DELETE","/CreditCard/123").respond({}),s.remove({id:123},l),expect(l).not.toHaveBeenCalled(),c.flush(),expect(l.calls.mostRecent().args[0]).toEqualData({}),expect(l.calls.mostRecent().args[1]()).toEqual(Object.create(null)),l.calls.reset(),c.expect("DELETE","/CreditCard/333").respond(204,null),s.remove({id:333},l),expect(l).not.toHaveBeenCalled(),c.flush(),expect(l.calls.mostRecent().args[0]).toEqualData({}),expect(l.calls.mostRecent().args[1]()).toEqual(Object.create(null))}),it("should post charge verb",function(){c.expect("POST","/CreditCard/123!charge?amount=10",'{"auth":"abc"}').respond({success:"ok"}),s.charge({id:123,amount:10},{auth:"abc"},l)}),it("should post charge verb on instance",function(){c.expect("POST","/CreditCard/123!charge?amount=10",'{"id":{"key":123},"name":"misko"}').respond({success:"ok"});var e=new s({id:{key:123},name:"misko"});e.$charge({amount:10},l)}),it("should patch a resource",function(){c.expectPATCH("/CreditCard/123",'{"name":"igor"}').respond({id:123,name:"rama"});var e=s.patch({id:123},{name:"igor"},l);expect(e).toEqualData({name:"igor"}),expect(l).not.toHaveBeenCalled(),c.flush(),expect(l).toHaveBeenCalled(),expect(e).toEqualData({id:123,name:"rama"})}),it("should create on save",function(){c.expect("POST","/CreditCard",'{"name":"misko"}').respond({id:123},{header1:"a"});var e=new s;expect(e.$get).toBeDefined(),expect(e.$query).toBeDefined(),expect(e.$remove).toBeDefined(),expect(e.$save).toBeDefined(),e.name="misko",e.$save(l),expect(e).toEqualData({name:"misko"}),c.flush(),expect(e).toEqualData({id:123}),expect(l.calls.mostRecent().args[0]).toEqual(e),expect(l.calls.mostRecent().args[1]()).toEqual(o(Object.create(null),{header1:"a"}))}),it("should not mutate the resource object if response contains no body",function(){var e={id:{key:123},number:"9876"};c.expect("GET","/CreditCard/123").respond(e);var n=s.get({id:123});c.flush(),expect(n instanceof s).toBe(!0),c.expect("POST","/CreditCard/123",t.toJson(e)).respond("");var r=n.id;n.$save(),c.flush(),expect(r).toEqual(n.id)}),it("should support dynamic default parameters (global)",function(){var e="students",t=i("/Person/:group/:id",{group:function(){return e}});c.expect("GET","/Person/students/fedor").respond({id:"fedor",email:"f@f.com"});var n=t.get({id:"fedor"});c.flush(),expect(n).toEqualData({id:"fedor",email:"f@f.com"})}),it("should pass resource object to dynamic default parameters",function(){var e=i("/Person/:id",{id:function(e){return e?e.id:"fedor"}});c.expect("GET","/Person/fedor").respond({id:"fedor",email:"f@f.com",count:1});var t=e.get();c.flush(),expect(t).toEqualData({id:"fedor",email:"f@f.com",count:1}),c.expect("POST","/Person/fedor2").respond({id:"fedor2",email:"f2@f.com",count:2}),t.id="fedor2",t.$save(),c.flush(),expect(t).toEqualData({id:"fedor2",email:"f2@f.com",count:2})}),it("should support dynamic default parameters (action specific)",function(){var e="students",t=i("/Person/:group/:id",{},{fetch:{method:"GET",params:{group:function(){return e}}}});c.expect("GET","/Person/students/fedor").respond({id:"fedor",email:"f@f.com"});var n=t.fetch({id:"fedor"});c.flush(),expect(n).toEqualData({id:"fedor",email:"f@f.com"})}),it("should exercise full stack",function(){var e=i("/Person/:id");c.expect("GET","/Person/123").respond('\n{\n"name":\n"misko"\n}\n');var t=e.get({id:123});c.flush(),expect(t.name).toEqual("misko")}),it("should return a resource instance when calling a class method with a resource instance",function(){c.expect("GET","/Person/123").respond('{"name":"misko"}');var e=i("/Person/:id"),t=e.get({id:123});c.flush(),c.expect("POST","/Person").respond('{"name":"misko2"}');var n=e.save(t);c.flush(),expect(n).toEqual(jasmine.any(e))}),it("should not include $promise and $resolved when resource is toJson'ed",function(){c.expect("GET","/CreditCard/123").respond({id:123,number:"9876"});var e=s.get({id:123});c.flush(),e.$myProp="still here",expect(e.$promise).toBeDefined(),expect(e.$resolved).toBe(!0);var n=JSON.parse(t.toJson(e));expect(n.$promise).not.toBeDefined(),expect(n.$resolved).not.toBeDefined(),expect(n).toEqual({id:123,number:"9876",$myProp:"still here"})}),it("should not include $cancelRequest when resource is toJson'ed",function(){c.whenGET("/CreditCard").respond({});var e=i("/CreditCard",{},{get:{method:"GET",cancellable:!0}}),t=e.get(),n=t.toJSON();expect(t.$cancelRequest).toBeDefined(),expect(n.$cancelRequest).toBeUndefined()}),describe("promise api",function(){var t;beforeEach(inject(function(e){t=e})),describe("single resource",function(){it("should add $promise to the result object",function(){c.expect("GET","/CreditCard/123").respond({id:123,number:"9876"});var e=s.get({id:123});e.$promise.then(l),expect(l).not.toHaveBeenCalled(),c.flush(),expect(l).toHaveBeenCalledOnce(),expect(l.calls.mostRecent().args[0]).toBe(e)}),it("should keep $promise around after resolution",function(){c.expect("GET","/CreditCard/123").respond({id:123,number:"9876"});var e=s.get({id:123});e.$promise.then(l),c.flush(),l.calls.reset(),e.$promise.then(l),t.$apply(),expect(l).toHaveBeenCalledOnce()}),it("should keep the original promise after instance action",function(){c.expect("GET","/CreditCard/123").respond({id:123,number:"9876"}),c.expect("POST","/CreditCard/123").respond({id:123,number:"9876"});var e=s.get({id:123}),t=e.$promise;e.number="666",e.$save({id:123}),expect(e.$promise).toBe(t)}),it("should allow promise chaining",function(){c.expect("GET","/CreditCard/123").respond({id:123,number:"9876"});var e=s.get({id:123});e.$promise.then(function(e){return"new value"}).then(l),c.flush(),expect(l).toHaveBeenCalledOnceWith("new value")}),it("should allow $promise error callback registration",function(){c.expect("GET","/CreditCard/123").respond(404,"resource not found");var e=s.get({id:123});e.$promise.then(null,l),c.flush();var t=l.calls.mostRecent().args[0];expect(t.data).toEqual("resource not found"),expect(t.status).toEqual(404)}),it("should add $resolved boolean field to the result object",function(){c.expect("GET","/CreditCard/123").respond({id:123,number:"9876"});var e=s.get({id:123});expect(e.$resolved).toBe(!1),e.$promise.then(l),expect(e.$resolved).toBe(!1),c.flush(),expect(e.$resolved).toBe(!0)}),it("should set $resolved field to true when an error occurs",function(){c.expect("GET","/CreditCard/123").respond(404,"resource not found");var e=s.get({id:123});e.$promise.then(null,l),c.flush(),expect(l).toHaveBeenCalledOnce(),expect(e.$resolved).toBe(!0)}),it("should keep $resolved true in all subsequent interactions",function(){c.expect("GET","/CreditCard/123").respond({id:123,number:"9876"});var e=s.get({id:123});c.flush(),expect(e.$resolved).toBe(!0),c.expect("POST","/CreditCard/123").respond(),e.$save({id:123}),expect(e.$resolved).toBe(!0),c.flush(),expect(e.$resolved).toBe(!0)}),it("should return promise from action method calls",function(){c.expect("GET","/CreditCard/123").respond({id:123,number:"9876"});var e=new s({name:"Mojo"});expect(e).toEqualData({name:"Mojo"}),e.$get({id:123}).then(l),c.flush(),expect(l).toHaveBeenCalledOnce(),expect(e).toEqualData({id:123,number:"9876"}),l.calls.reset(),c.expect("POST","/CreditCard").respond({id:1,number:"9"}),e.$save().then(l),c.flush(),expect(l).toHaveBeenCalledOnce(),expect(e).toEqualData({id:1,number:"9"})}),it("should allow parsing a value from headers",function(){c.expect("POST","/CreditCard").respond(201,"",{Location:"/new-id"});var e=function(e){var t=e.resource;return t.url=e.headers("Location"),t},t=i("/CreditCard",{},{save:{method:"post",interceptor:{response:e}}}),n=new t({name:"Me"});n.$save(),c.flush(),expect(n.url).toBe("/new-id")}),it("should pass the same transformed value to success callbacks and to promises",function(){c.expect("GET","/CreditCard").respond(200,{value:"original"});var e,t,n=function(e){return{value:"transformed"}},r=i("/CreditCard",{},{call:{method:"get",interceptor:{response:n}}}),a=new r({name:"Me"}),o=a.$call({},function(t){e=t});o.then(function(e){t=e}),c.flush(),expect(e).toEqual({value:"transformed"}),expect(t).toEqual({value:"transformed"}),expect(e).toBe(t)})}),describe("resource collection",function(){it("should add $promise to the result object",function(){c.expect("GET","/CreditCard?key=value").respond([{id:1},{id:2}]);var e=s.query({key:"value"});e.$promise.then(l),expect(l).not.toHaveBeenCalled(),c.flush(),expect(l).toHaveBeenCalledOnce(),expect(l.calls.mostRecent().args[0]).toBe(e)}),it("should keep $promise around after resolution",function(){c.expect("GET","/CreditCard?key=value").respond([{id:1},{id:2}]);var e=s.query({key:"value"});e.$promise.then(l),c.flush(),l.calls.reset(),e.$promise.then(l),t.$apply(),expect(l).toHaveBeenCalledOnce()}),it("should allow promise chaining",function(){c.expect("GET","/CreditCard?key=value").respond([{id:1},{id:2}]);var e=s.query({key:"value"});e.$promise.then(function(e){return"new value"}).then(l),c.flush(),expect(l).toHaveBeenCalledOnceWith("new value")}),it("should allow $promise error callback registration",function(){c.expect("GET","/CreditCard?key=value").respond(404,"resource not found");var e=s.query({key:"value"});e.$promise.then(null,l),c.flush();var t=l.calls.mostRecent().args[0];expect(t.data).toEqual("resource not found"),expect(t.status).toEqual(404)}),it("should add $resolved boolean field to the result object",function(){c.expect("GET","/CreditCard?key=value").respond([{id:1},{id:2}]);var e=s.query({key:"value"},l);expect(e.$resolved).toBe(!1),e.$promise.then(l),expect(e.$resolved).toBe(!1),c.flush(),expect(e.$resolved).toBe(!0)}),it("should set $resolved field to true when an error occurs",function(){c.expect("GET","/CreditCard?key=value").respond(404,"resource not found");var e=s.query({key:"value"});e.$promise.then(null,l),c.flush(),expect(l).toHaveBeenCalledOnce(),expect(e.$resolved).toBe(!0)})}),describe("requestInterceptor",function(){var e,n,r={lol:"cat"};beforeEach(function(){e=jasmine.createSpy("successSpy"),n=jasmine.createSpy("failureSpy")}),it("should allow per action request interceptor that gets full configuration",function(){var t=i("/CreditCard",{},{query:{method:"get",isArray:!0,interceptor:{request:function(e){return l(e),e}}}});c.expect("GET","/CreditCard").respond([{id:1}]);var r=t.query();r.$promise.then(e,n),c.flush(),expect(l).toHaveBeenCalledOnce(),expect(e).toHaveBeenCalledOnce(),expect(n).not.toHaveBeenCalled(),expect(l).toHaveBeenCalledWith({method:"get",url:"/CreditCard"})}),it("should call $http with the value returned from requestInterceptor",function(){var t=i("/CreditCard",{},{query:{method:"get",isArray:!0,interceptor:{request:function(e){return e.url="/DebitCard",e}}}});c.expect("GET","/DebitCard").respond([{id:1}]);var r=t.query();r.$promise.then(e,n),c.flush(),expect(e).toHaveBeenCalledOnceWith(jasmine.arrayContaining([jasmine.objectContaining({id:1})])),expect(n).not.toHaveBeenCalled()}),it("should abort the operation if the requestInterceptor rejects the operation",function(){var a=i("/CreditCard",{},{query:{method:"get",isArray:!0,interceptor:{request:function(){return u.reject(r)}}}}),o=a.query();o.$promise.then(e,n),t.$apply(),expect(o.$resolved).toBeTruthy(),expect(e).not.toHaveBeenCalled(),expect(n).toHaveBeenCalledOnceWith(r),c.verifyNoOutstandingRequest()}),it("should call requestErrorInterceptor if requestInterceptor rejects the operation",function(){var a=i("/CreditCard",{},{query:{method:"get",isArray:!0,interceptor:{request:function(){return u.reject(r)},requestError:function(e){return l(e),u.reject(e)}}}}),o=a.query();o.$promise.then(e,n),t.$digest(),expect(l).toHaveBeenCalledOnceWith(r),expect(e).not.toHaveBeenCalled(),expect(n).toHaveBeenCalledOnceWith(r),c.verifyNoOutstandingRequest()}),it("should abort the operation if a requestErrorInterceptor rejects the operation",function(){var a=i("/CreditCard",{},{query:{method:"get",isArray:!0,interceptor:{request:function(){return u.reject(r)},requestError:function(e){return u.reject(e)}
}}}),o=a.query();o.$promise.then(e,n),t.$apply(),expect(o.$resolved).toBeTruthy(),expect(e).not.toHaveBeenCalled(),expect(n).toHaveBeenCalledOnceWith(r),c.verifyNoOutstandingRequest()}),it("should continue the operation if a requestErrorInterceptor rescues it",function(){var t=i("/CreditCard",{},{query:{method:"get",isArray:!0,interceptor:{request:function(e){return u.reject(e)},requestError:function(e){return u.resolve(e)}}}});c.expect("GET","/CreditCard").respond([{id:1}]);var r=t.query();r.$promise.then(e,n),c.flush(),expect(r.$resolved).toBeTruthy(),expect(e).toHaveBeenCalledOnceWith(jasmine.arrayContaining([jasmine.objectContaining({id:1})])),expect(n).not.toHaveBeenCalled(),c.verifyNoOutstandingRequest()})}),describe("responseInterceptor",function(){it("should allow per action response interceptor that gets full response",function(){var e;c.expect("GET","/CreditCard").respond(201,{id:1},{foo:"bar"},"Ack"),s=i("/CreditCard",{},{get:{method:"get",interceptor:{response:function(t){e=t}}}});var t=s.get();c.flush(),expect(e.resource).toBe(t),expect(e.config).toBeDefined(),expect(e.status).toBe(201),expect(e.statusText).toBe("Ack"),expect(e.headers()).toEqual({foo:"bar"})}),it("should allow per action responseError interceptor that gets full response",function(){var e;c.expect("GET","/CreditCard").respond(404,{ignored:"stuff"},{foo:"bar"},"Ack"),s=i("/CreditCard",{},{get:{method:"get",interceptor:{responseError:function(t){e=t}}}});var t=s.get();c.flush(),expect(e.resource).toBe(t),expect(e.config).toBeDefined(),expect(e.status).toBe(404),expect(e.statusText).toBe("Ack"),expect(e.headers()).toEqual({foo:"bar"})}),it("should fulfill the promise with the value returned by the response interceptor",function(){c.whenGET("/CreditCard").respond(200),s=i("/CreditCard",{},{test1:{method:"get",interceptor:{response:function(){return"foo"}}},test2:{method:"get",interceptor:{response:function(){return u.resolve("bar")}}},test3:{method:"get",interceptor:{response:function(){return u.reject("baz")}}}}),s.test1().$promise.then(l),c.flush(),expect(l).toHaveBeenCalledOnceWith("foo"),l.calls.reset(),s.test2().$promise.then(l),c.flush(),expect(l).toHaveBeenCalledOnceWith("bar"),l.calls.reset(),s.test3().$promise.then(null,l),c.flush(),expect(l).toHaveBeenCalledOnceWith("baz")}),it("should fulfill the promise with the value returned by the responseError interceptor",function(){c.whenGET("/CreditCard").respond(404),s=i("/CreditCard",{},{test1:{method:"get",interceptor:{responseError:function(){return"foo"}}},test2:{method:"get",interceptor:{responseError:function(){return u.resolve("bar")}}},test3:{method:"get",interceptor:{responseError:function(){return u.reject("baz")}}}}),s.test1().$promise.then(l),c.flush(),expect(l).toHaveBeenCalledOnceWith("foo"),l.calls.reset(),s.test2().$promise.then(l),c.flush(),expect(l).toHaveBeenCalledOnceWith("bar"),l.calls.reset(),s.test3().$promise.then(null,l),c.flush(),expect(l).toHaveBeenCalledOnceWith("baz")}),it("should call the success callback when response interceptor succeeds",function(){c.whenGET("/CreditCard").respond(200),s=i("/CreditCard",{},{test1:{method:"get",interceptor:{response:function(){return"foo"}}},test2:{method:"get",interceptor:{response:function(){return u.resolve("bar")}}}}),s.test1(l),c.flush(),expect(l).toHaveBeenCalledOnceWith("foo",jasmine.any(Function),200,""),l.calls.reset(),s.test2(l),c.flush(),expect(l).toHaveBeenCalledOnceWith("bar",jasmine.any(Function),200,"")}),it("should call the error callback when response interceptor fails",function(){c.whenGET("/CreditCard").respond(200),s=i("/CreditCard",{},{test1:{method:"get",interceptor:{response:function(){throw"foo"}}},test2:{method:"get",interceptor:{response:function(){return u.reject("bar")}}}}),s.test1(e,l),c.flush(),expect(l).toHaveBeenCalledOnceWith("foo"),l.calls.reset(),s.test2(e,l),c.flush(),expect(l).toHaveBeenCalledOnceWith("bar")}),it("should call the success callback when responseError interceptor succeeds",function(){c.whenGET("/CreditCard").respond(404),s=i("/CreditCard",{},{test1:{method:"get",interceptor:{responseError:function(){return"foo"}}},test2:{method:"get",interceptor:{responseError:function(){return u.resolve("bar")}}}}),s.test1(l),c.flush(),expect(l).toHaveBeenCalledOnceWith("foo",jasmine.any(Function),404,""),l.calls.reset(),s.test2(l),c.flush(),expect(l).toHaveBeenCalledOnceWith("bar",jasmine.any(Function),404,"")}),it("should call the error callback when responseError interceptor fails",function(){c.whenGET("/CreditCard").respond(404),s=i("/CreditCard",{},{test1:{method:"get",interceptor:{responseError:function(){throw"foo"}}},test2:{method:"get",interceptor:{responseError:function(){return u.reject("bar")}}}}),s.test1(e,l),c.flush(),expect(l).toHaveBeenCalledOnceWith("foo"),l.calls.reset(),s.test2(e,l),c.flush(),expect(l).toHaveBeenCalledOnceWith("bar")})})}),describe("success mode",function(){it("should call the success callback (as 1st argument) on 2xx responses",function(){var e,t,n,r,a=jasmine.createSpy("successCb").and.callFake(function(a,o,i,s){expect(a).toBe(e),expect(o()).toEqual(jasmine.objectContaining(t)),expect(i).toBe(n),expect(s).toBe(r)});e=s.get(a),t={foo:"bar"},n=200,r="OK",c.expect("GET","/CreditCard").respond(n,{},t,r),c.flush(),expect(a).toHaveBeenCalledOnce(),e=s.get(a),t={baz:"qux"},n=299,r="KO",c.expect("GET","/CreditCard").respond(n,{},t,r),c.flush(),expect(a).toHaveBeenCalledTimes(2)}),it("should call the success callback (as 2nd argument) on 2xx responses",function(){var e,t,n,r,a=jasmine.createSpy("successCb").and.callFake(function(a,o,i,s){expect(a).toBe(e),expect(o()).toEqual(jasmine.objectContaining(t)),expect(i).toBe(n),expect(s).toBe(r)});e=s.get({id:123},a),t={foo:"bar"},n=200,r="OK",c.expect("GET","/CreditCard/123").respond(n,{},t,r),c.flush(),expect(a).toHaveBeenCalledOnce(),e=s.get({id:456},a),t={baz:"qux"},n=299,r="KO",c.expect("GET","/CreditCard/456").respond(n,{},t,r),c.flush(),expect(a).toHaveBeenCalledTimes(2)})}),describe("failure mode",function(){var e,t=500,n="Server Error";beforeEach(function(){e=jasmine.createSpy("error").and.callFake(function(e){expect(e.data).toBe(n),expect(e.status).toBe(t)})}),it("should call the error callback if provided on non 2xx response",function(){c.expect("GET","/CreditCard/123").respond(t,n),s.get({id:123},l,e),c.flush(),expect(e).toHaveBeenCalledOnce(),expect(l).not.toHaveBeenCalled()}),it("should call the error callback if provided on non 2xx response (without data)",function(){c.expect("GET","/CreditCard").respond(t,n),s.get(l,e),c.flush(),expect(e).toHaveBeenCalledOnce(),expect(l).not.toHaveBeenCalled()})}),it("should transform request/response",function(){var e=i("/Person/:id",{},{save:{method:"POST",params:{id:"@id"},transformRequest:function(e){return t.toJson({__id:e.id})},transformResponse:function(e){return{id:e.__id}}}});c.expect("POST","/Person/123",{__id:123}).respond({__id:456});var n=new e({id:123});n.$save(),c.flush(),expect(n.id).toEqual(456)}),describe("suffix parameter",function(){describe("query",function(){it("should add a suffix",function(){c.expect("GET","/users.json").respond([{id:1,name:"user1"}]);var e=i("/users/:id.json",{id:"@id"}),t=e.query();c.flush(),expect(t).toEqualData([{id:1,name:"user1"}])}),it("should not require it if not provided",function(){c.expect("GET","/users.json").respond([{id:1,name:"user1"}]);var e=i("/users.json"),t=e.query();c.flush(),expect(t).toEqualData([{id:1,name:"user1"}])}),it("should work when query parameters are supplied",function(){c.expect("GET","/users.json?red=blue").respond([{id:1,name:"user1"}]);var e=i("/users/:user_id.json",{user_id:"@id"}),t=e.query({red:"blue"});c.flush(),expect(t).toEqualData([{id:1,name:"user1"}])}),it("should work when query parameters are supplied and the format is a resource parameter",function(){c.expect("GET","/users.json?red=blue").respond([{id:1,name:"user1"}]);var e=i("/users/:user_id.:format",{user_id:"@id",format:"json"}),t=e.query({red:"blue"});c.flush(),expect(t).toEqualData([{id:1,name:"user1"}])}),it("should work with the action is overridden",function(){c.expect("GET","/users.json").respond([{id:1,name:"user1"}]);var e=i("/users/:user_id",{user_id:"@id"},{query:{method:"GET",url:"/users/:user_id.json",isArray:!0}}),t=e.query();c.flush(),expect(t).toEqualData([{id:1,name:"user1"}])}),it("should not convert string literals in array into Resource objects",function(){c.expect("GET","/names.json").respond(["mary","jane"]);var e=i("/names.json").query();c.flush(),expect(e).toEqualData(["mary","jane"])}),it("should not convert number literals in array into Resource objects",function(){c.expect("GET","/names.json").respond([213,456]);var e=i("/names.json").query();c.flush(),expect(e).toEqualData([213,456])}),it("should not convert boolean literals in array into Resource objects",function(){c.expect("GET","/names.json").respond([!0,!1]);var e=i("/names.json").query();c.flush(),expect(e).toEqualData([!0,!1])})}),describe("get",function(){it("should add them to the id",function(){c.expect("GET","/users/1.json").respond({id:1,name:"user1"});var e=i("/users/:user_id.json",{user_id:"@id"}),t=e.get({user_id:1});c.flush(),expect(t).toEqualData({id:1,name:"user1"})}),it("should work when an id and query parameters are supplied",function(){c.expect("GET","/users/1.json?red=blue").respond({id:1,name:"user1"});var e=i("/users/:user_id.json",{user_id:"@id"}),t=e.get({user_id:1,red:"blue"});c.flush(),expect(t).toEqualData({id:1,name:"user1"})}),it("should work when the format is a parameter",function(){c.expect("GET","/users/1.json?red=blue").respond({id:1,name:"user1"});var e=i("/users/:user_id.:format",{user_id:"@id",format:"json"}),t=e.get({user_id:1,red:"blue"});c.flush(),expect(t).toEqualData({id:1,name:"user1"})}),it("should work with the action is overridden",function(){c.expect("GET","/users/1.json").respond({id:1,name:"user1"});var e=i("/users/:user_id",{user_id:"@id"},{get:{method:"GET",url:"/users/:user_id.json"}}),t=e.get({user_id:1});c.flush(),expect(t).toEqualData({id:1,name:"user1"})})}),describe("save",function(){it("should append the suffix",function(){c.expect("POST","/users.json",'{"name":"user1"}').respond({id:123,name:"user1"});var e=i("/users/:user_id.json",{user_id:"@id"}),t=e.save({name:"user1"},l);expect(t).toEqualData({name:"user1"}),expect(l).not.toHaveBeenCalled(),c.flush(),expect(t).toEqualData({id:123,name:"user1"}),expect(l).toHaveBeenCalledOnce(),expect(l.calls.mostRecent().args[0]).toEqual(t),expect(l.calls.mostRecent().args[1]()).toEqual(Object.create(null))}),it("should append when an id is supplied",function(){c.expect("POST","/users/123.json",'{"id":123,"name":"newName"}').respond({id:123,name:"newName"});var e=i("/users/:user_id.json",{user_id:"@id"}),t=e.save({id:123,name:"newName"},l);expect(l).not.toHaveBeenCalled(),c.flush(),expect(t).toEqualData({id:123,name:"newName"}),expect(l).toHaveBeenCalledOnce(),expect(l.calls.mostRecent().args[0]).toEqual(t),expect(l.calls.mostRecent().args[1]()).toEqual(Object.create(null))}),it("should append when an id is supplied and the format is a parameter",function(){c.expect("POST","/users/123.json",'{"id":123,"name":"newName"}').respond({id:123,name:"newName"});var e=i("/users/:user_id.:format",{user_id:"@id",format:"json"}),t=e.save({id:123,name:"newName"},l);expect(l).not.toHaveBeenCalled(),c.flush(),expect(t).toEqualData({id:123,name:"newName"}),expect(l).toHaveBeenCalledOnce(),expect(l.calls.mostRecent().args[0]).toEqual(t),expect(l.calls.mostRecent().args[1]()).toEqual(Object.create(null))})}),describe("escaping /. with /\\.",function(){it("should work with query()",function(){c.expect("GET","/users/.json").respond(),i("/users/\\.json").query()}),it("should work with get()",function(){c.expect("GET","/users/.json").respond(),i("/users/\\.json").get()}),it("should work with save()",function(){c.expect("POST","/users/.json").respond(),i("/users/\\.json").save({})}),it("should work with save() if dynamic params",function(){c.expect("POST","/users/.json").respond(),i("/users/:json",{json:"\\.json"}).save({})}),it("should work with query() if dynamic params",function(){c.expect("GET","/users/.json").respond(),i("/users/:json",{json:"\\.json"}).query()}),it("should work with get() if dynamic params",function(){c.expect("GET","/users/.json").respond(),i("/users/:json",{json:"\\.json"}).get()})})}),describe("action-level url override",function(){it("should support overriding url template with static url",function(){c.expect("GET","/override-url?type=Customer&typeId=123").respond({id:"abc"});var e=i("/:type/:typeId",{type:"Order"},{get:{method:"GET",params:{type:"Customer"},url:"/override-url"}}),t=e.get({typeId:123});c.flush(),expect(t).toEqualData({id:"abc"})}),it("should support overriding url template with a new template ending in param",function(){c.expect("GET","/Customer/123").respond({id:"abc"});var e=i("/foo/:type",{type:"Order"},{get:{method:"GET",params:{type:"Customer"},url:"/:type/:typeId"}}),t=e.get({typeId:123});c.flush(),expect(t).toEqualData({id:"abc"}),c.expect("GET","/Customer/123/pay").respond({id:"abc"}),e=i("/foo/:type",{type:"Order"},{get:{method:"GET",params:{type:"Customer"},url:"/:type/:typeId/pay"}}),t=e.get({typeId:123}),c.flush(),expect(t).toEqualData({id:"abc"})}),it("should support overriding url template with a new template ending in string",function(){c.expect("GET","/Customer/123/pay").respond({id:"abc"});var e=i("/foo/:type",{type:"Order"},{get:{method:"GET",params:{type:"Customer"},url:"/:type/:typeId/pay"}}),t=e.get({typeId:123});c.flush(),expect(t).toEqualData({id:"abc"})})})}),describe("extra params",function(){var e,t,n,r;beforeEach(module("ngResource")),beforeEach(module(function(e){e.decorator("$http",function(e){return jasmine.createSpy("$http").and.callFake(e)})})),beforeEach(inject(function(a,o,i,s){e=a,t=o,n=i,r=s})),afterEach(function(){t.verifyNoOutstandingExpectation()}),it("should pass extra params to `$http` as `config.params`",function(){t.expectGET("/bar?baz=qux").respond("{}");var a=n("/:foo");a.get({foo:"bar",baz:"qux"}),r.$digest(),expect(e).toHaveBeenCalledWith(jasmine.objectContaining({params:{baz:"qux"}}))}),it("should pass extra params even if `Object.prototype` has properties with the same name",function(){t.expectGET("/foo?toString=bar").respond("{}");var e=n("/foo");e.get({toString:"bar"})})}),describe("errors",function(){var e,t;beforeEach(module(function(e){e.mode("log")})),beforeEach(module("ngResource")),beforeEach(inject(function(n){e=n.get("$httpBackend"),t=n.get("$resource")})),it("should fail if action expects an object but response is an array",function(){var n=jasmine.createSpy("successSpy"),r=jasmine.createSpy("failureSpy");e.expect("GET","/Customer/123").respond({id:"abc"}),t("/Customer/123").query().$promise.then(n,function(e){r(e.message)}),e.flush(),expect(n).not.toHaveBeenCalled(),expect(r).toHaveBeenCalled(),expect(r.calls.mostRecent().args[0]).toEqualMinErr("$resource","badcfg","Error in resource configuration for action `query`. Expected response to contain an array but got an object (Request: GET /Customer/123)")}),it("should fail if action expects an array but response is an object",function(){var n=jasmine.createSpy("successSpy"),r=jasmine.createSpy("failureSpy");e.expect("GET","/Customer/123").respond([1,2,3]),t("/Customer/123").get().$promise.then(n,function(e){r(e.message)}),e.flush(),expect(n).not.toHaveBeenCalled(),expect(r).toHaveBeenCalled(),expect(r.calls.mostRecent().args[0]).toEqualMinErr("$resource","badcfg","Error in resource configuration for action `get`. Expected response to contain an object but got an array (Request: GET /Customer/123)")})}),describe("handling rejections",function(){var t,n,r;beforeEach(module("ngResource")),beforeEach(module(function(e){e.mode("log")})),beforeEach(inject(function(e,a,o){t=e,n=a,r=o,n.whenGET("/CreditCard").respond(404)})),it("should reject the promise even when there is an error callback",function(){var t=jasmine.createSpy("errorCb1"),a=jasmine.createSpy("errorCb2"),o=r("/CreditCard");o.get(e,t).$promise["catch"](a),n.flush(),expect(t).toHaveBeenCalledOnce(),expect(a).toHaveBeenCalledOnce()}),it("should report a PUR when no error callback or responseError interceptor is provided",function(){var e=r("/CreditCard");e.get(),n.flush(),expect(t.errors.length).toBe(1),expect(t.errors[0]).toMatch(/^Possibly unhandled rejection/)}),it("should not report a PUR when an error callback or responseError interceptor is provided",function(){var a=r("/CreditCard",{},{test1:{method:"GET"},test2:{method:"GET",interceptor:{responseError:function(){return{}}}}});a.test1(e,e),n.flush(),expect(t.errors.length).toBe(0),a.test2(),n.flush(),expect(t.errors.length).toBe(0),a.test2(e,e),n.flush(),expect(t.errors.length).toBe(0)}),it("should report a PUR when the responseError interceptor returns a rejected promise",inject(function(e){var a=r("/CreditCard",{},{test:{method:"GET",interceptor:{responseError:function(){return e.reject({})}}}});a.test(),n.flush(),expect(t.errors.length).toBe(1),expect(t.errors[0]).toMatch(/^Possibly unhandled rejection/)})),it("should not swallow exceptions in success callback when error callback is provided",function(){n.expectGET("/CreditCard/123").respond(null);var e=r("/CreditCard/:id");e.get({id:123},function(e){throw new Error("should be caught")},function(){}),n.flush(),expect(t.errors.length).toBe(1),expect(t.errors[0]).toMatch(/^Error: should be caught/)}),it("should not swallow exceptions in success callback when error callback is not provided",function(){n.expectGET("/CreditCard/123").respond(null);var e=r("/CreditCard/:id");e.get({id:123},function(e){throw new Error("should be caught")}),n.flush(),expect(t.errors.length).toBe(1),expect(t.errors[0]).toMatch(/^Error: should be caught/)}),it("should not swallow exceptions in success callback when error callback is provided and has responseError interceptor",function(){n.expectGET("/CreditCard/123").respond(null);var e=r("/CreditCard/:id",null,{get:{method:"GET",interceptor:{responseError:function(){}}}});e.get({id:123},function(e){throw new Error("should be caught")},function(){}),n.flush(),expect(t.errors.length).toBe(1),expect(t.errors[0]).toMatch(/^Error: should be caught/)}),it("should not swallow exceptions in success callback when error callback is not provided and has responseError interceptor",function(){n.expectGET("/CreditCard/123").respond(null);var e=r("/CreditCard/:id",null,{get:{method:"GET",interceptor:{responseError:function(){}}}});e.get({id:123},function(e){throw new Error("should be caught")}),n.flush(),expect(t.errors.length).toBe(1),expect(t.errors[0]).toMatch(/^Error: should be caught/)}),it("should not propagate exceptions in success callback to the returned promise",function(){var e=jasmine.createSpy("successCallback").and.throwError("error"),t=jasmine.createSpy("promiseResolve"),a=jasmine.createSpy("promiseReject");n.expectGET("/CreditCard/123").respond(null);var o=r("/CreditCard/:id");o.get({id:123},e).$promise.then(t,a),n.flush(),expect(e).toHaveBeenCalled(),expect(t).toHaveBeenCalledWith(jasmine.any(o)),expect(a).not.toHaveBeenCalled()}),it("should not be able to recover from inside the error callback",function(){var t=jasmine.createSpy("errorCallback").and.returnValue({id:123}),a=jasmine.createSpy("promiseResolve"),o=jasmine.createSpy("promiseReject");n.expectGET("/CreditCard/123").respond(404);var i=r("/CreditCard/:id");i.get({id:123},e,t).$promise.then(a,o),n.flush(),expect(t).toHaveBeenCalled(),expect(a).not.toHaveBeenCalled(),expect(o).toHaveBeenCalledWith(jasmine.objectContaining({status:404}))}),describe("requestInterceptor",function(){var e,t,a,o,i,s={lol:"cat"};beforeEach(inject(function(n,r){e=n,t=r,a=jasmine.createSpy("successSpy"),o=jasmine.createSpy("failureSpy"),i=jasmine.createSpy()})),it("should call requestErrorInterceptor if requestInterceptor throws an error",function(){var l=r("/CreditCard",{},{query:{method:"get",isArray:!0,interceptor:{request:function(){throw s},requestError:function(t){return i(t),e.reject(t)}}}}),c=l.query();c.$promise.then(a,o),t.$apply(),expect(i).toHaveBeenCalledOnce(),expect(i).toHaveBeenCalledWith(s),expect(a).not.toHaveBeenCalled(),expect(o).toHaveBeenCalledOnce(),expect(o).toHaveBeenCalledWith(s),n.verifyNoOutstandingRequest()}),it("should abort the operation if a requestErrorInterceptor throws an exception",function(){var i=r("/CreditCard",{},{query:{method:"get",isArray:!0,interceptor:{request:function(){return e.reject()},requestError:function(){throw s}}}}),l=i.query();l.$promise.then(a,o),t.$apply(),expect(l.$resolved).toBeTruthy(),expect(a).not.toHaveBeenCalled(),expect(o).toHaveBeenCalledOnce(),expect(o).toHaveBeenCalledWith(s),n.verifyNoOutstandingRequest()})})}),describe("cancelling requests",function(){var t,n,r,a;beforeEach(module("ngResource",function(e){e.decorator("$http",function(e){return t=jasmine.createSpy("$http").and.callFake(e)})})),beforeEach(inject(function(e,t,o){n=e,r=t,a=o})),it("should accept numeric timeouts in actions and pass them to $http",function(){n.whenGET("/CreditCard").respond({});var e=r("/CreditCard",{},{get:{method:"GET",timeout:1e4}});e.get(),n.flush(),expect(t).toHaveBeenCalledOnce(),expect(t.calls.argsFor(0)[0].timeout).toBe(1e4)}),it("should delete non-numeric timeouts in actions and log a $debug message",inject(function(e,a){spyOn(e,"debug"),n.whenGET("/CreditCard").respond({});var o=r("/CreditCard",{},{get:{method:"GET",timeout:a.defer().promise}});o.get(),n.flush(),expect(t).toHaveBeenCalledOnce(),expect(t.calls.argsFor(0)[0].timeout).toBeUndefined(),expect(e.debug).toHaveBeenCalledOnceWith("ngResource:\n  Only numeric values are allowed as `timeout`.\n  Promises are not supported in $resource, because the same value would be used for multiple requests. If you are looking for a way to cancel requests, you should use the `cancellable` option.")})),it("should use `cancellable` value if passed a non-numeric `timeout` in an action",inject(function(e,a,o){spyOn(e,"debug"),n.whenGET("/CreditCard").respond({});var i=r("/CreditCard",{},{get:{method:"GET",timeout:a.defer().promise,cancellable:!0}}),s=i.get();o.$digest(),expect(s.$cancelRequest).toBeDefined(),expect(t.calls.argsFor(0)[0].timeout).toEqual(jasmine.any(a)),expect(t.calls.argsFor(0)[0].timeout.then).toBeDefined(),expect(e.debug).toHaveBeenCalledOnceWith("ngResource:\n  Only numeric values are allowed as `timeout`.\n  Promises are not supported in $resource, because the same value would be used for multiple requests. If you are looking for a way to cancel requests, you should use the `cancellable` option.")})),it("should not create a `$cancelRequest` method for instance calls",function(){n.whenPOST("/CreditCard").respond({});var e=r("/CreditCard",{},{save1:{method:"POST",cancellable:!1},save2:{method:"POST",cancellable:!0}}),t=new e,a=t.$save1();expect(a.$cancelRequest).toBeUndefined(),expect(t.$cancelRequest).toBeUndefined();var o=t.$save2();expect(o.$cancelRequest).toBeUndefined(),expect(t.$cancelRequest).toBeUndefined(),n.flush(),expect(a.$cancelRequest).toBeUndefined(),expect(o.$cancelRequest).toBeUndefined(),expect(t.$cancelRequest).toBeUndefined()}),it("should not create a `$cancelRequest` method for non-cancellable calls",function(){var e=r("/CreditCard",{},{get:{method:"GET",cancellable:!1}}),t=e.get();expect(t.$cancelRequest).toBeUndefined()}),it("should also take into account `options.cancellable`",function(){var e={cancellable:!0},t=r("/CreditCard",{},{get1:{method:"GET",cancellable:!1},get2:{method:"GET",cancellable:!0},get3:{method:"GET"}},e),n=t.get1(),a=t.get2(),o=t.get3();expect(n.$cancelRequest).toBeUndefined(),expect(a.$cancelRequest).toBeDefined(),expect(o.$cancelRequest).toBeDefined(),e={cancellable:!1},t=r("/CreditCard",{},{get1:{method:"GET",cancellable:!1},get2:{method:"GET",cancellable:!0},get3:{method:"GET"}},e),n=t.get1(),a=t.get2(),o=t.get3(),expect(n.$cancelRequest).toBeUndefined(),expect(a.$cancelRequest).toBeDefined(),expect(o.$cancelRequest).toBeUndefined()}),it("should accept numeric timeouts in cancellable actions and cancel the request when timeout occurs",function(){n.whenGET("/CreditCard").respond({});var t=r("/CreditCard",{},{get:{method:"GET",timeout:1e4,cancellable:!0}}),o=t.get();o.$promise["catch"](e),a.flush(),expect(n.flush).toThrow(new Error("No pending request to flush !")),t.get(),expect(n.flush).not.toThrow()}),it("should cancel the request (if cancellable), when calling `$cancelRequest`",function(){n.whenGET("/CreditCard").respond({});var e=r("/CreditCard",{},{get:{method:"GET",cancellable:!0}}),t=e.get();t.$cancelRequest(),expect(n.flush).toThrow(new Error("No pending request to flush !")),e.get(),expect(n.flush).not.toThrow()}),it("should cancel the request, when calling `$cancelRequest` in cancellable actions with timeout defined",function(){n.whenGET("/CreditCard").respond({});var e=r("/CreditCard",{},{get:{method:"GET",timeout:1e4,cancellable:!0}}),t=e.get();t.$cancelRequest(),expect(n.flush).toThrow(new Error("No pending request to flush !")),e.get(),expect(n.flush).not.toThrow()}),it("should reset `$cancelRequest` after the response arrives",function(){n.whenGET("/CreditCard").respond({});var t=r("/CreditCard",{},{get:{method:"GET",cancellable:!0}}),a=t.get();expect(a.$cancelRequest).not.toBe(e),n.flush(),expect(a.$cancelRequest).toBe(e)}),it("should not break when calling old `$cancelRequest` after the response arrives",function(){n.whenGET("/CreditCard").respond({});var t=r("/CreditCard",{},{get:{method:"GET",cancellable:!0}}),a=t.get(),o=a.$cancelRequest;n.flush(),expect(o).not.toBe(e),expect(o).not.toThrow()})}),describe("configuring `cancellable` on the provider",function(){var e;beforeEach(module("ngResource",function(e){e.defaults.cancellable=!0})),beforeEach(inject(function(t){e=t})),it("should also take into account `$resourceProvider.defaults.cancellable`",function(){var t=e("/CreditCard",{},{get1:{method:"GET",cancellable:!1},get2:{method:"GET",cancellable:!0},get3:{method:"GET"}}),n=t.get1(),r=t.get2(),a=t.get3();expect(n.$cancelRequest).toBeUndefined(),expect(r.$cancelRequest).toBeDefined(),expect(a.$cancelRequest).toBeDefined()})})})}(window,window.angular);